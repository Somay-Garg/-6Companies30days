class Solution {
public:
    int maxDistance(vector<vector<int>>& grid) {
        int n = grid.size();
        vector<vector<int>>dp(n,vector<int>(n,INT_MAX));
        queue<pair<int,int>>q;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){
                    dp[i][j]=0;
                    q.push({i,j});
                }
            }
        }
        if(q.empty()||q.size()==n*n){
            return -1;
        }
        int ans=INT_MIN;
        vector<int>dis={1,0,-1,0,1};
        while(!q.empty()){
            auto it = q.front();
            q.pop();
            for(int i=0;i<4;i++){
                int x = it.first+dis[i];
                int y = it.second+dis[i+1];
                if(x>=0&&x<n&&y>=0&&y<n){
                    if(dp[x][y]==INT_MAX){
                        q.push({x,y});
                    }
                    dp[x][y] = min(dp[x][y],dp[it.first][it.second]+1);
                    ans=max(ans,dp[x][y]);
                }
            }
        }
        return ans;
    }
};
