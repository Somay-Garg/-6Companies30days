    //Mathematical Solution
class Solution
{
    public:
    int NumberOfPath(int a, int b)
    {
        int n = a+b-2;
        int r = a-1;
        int ans=1;
        for(int i=1;i<=r;i++){
            ans = ans*(n-r+i)/i;
        }
        return ans;
    }
};

    //Dynamic Programming Solution
// class Solution
// {
//     public:
//     int NumberOfPath(int a, int b)
//     {
//         return helper(0,0,a,b);
//     }
    
//     int helper(int i, int j, int a, int b){
//         if(i>=a||j>=b){
//             return 0;
//         }
//         if(i==a-1&&j==b-1){
//             return 1;
//         }
//         return helper(i+1,j,a,b)+helper(i,j+1,a,b);
//     }
// };


    //Recursive Solution
// class Solution
// {
//     public:
//     int NumberOfPath(int a, int b)
//     {
//         vector<vector<int>>dp(a+1,vector<int>(b+1,-1));
//         return helper(0,0,a,b,dp);
//     }
    
//     int helper(int i, int j, int a, int b,vector<vector<int>>&dp){
//         if(i>=a||j>=b){
//             return 0;
//         }
//         if(i==a-1&&j==b-1){
//             return 1;
//         }
//         if(dp[i][j]!=-1){
//             return dp[i][j];
//         }
//         return dp[i][j] = helper(i+1,j,a,b,dp) + helper(i,j+1,a,b,dp);
//     }
// };
