class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int time=0,m=grid.size(),n=grid[0].size(),total=0;
        queue<int>q;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]!=0){
                    total++;
                }
                if(grid[i][j]==2){
                    q.push(i*n+j);
                }
            }
        }
        int rotten=0;
        vector<int>dx={1,0,-1,0,1};
        while(!q.empty()){
            rotten+=q.size();
            int size = q.size();
            while(size--){
                int top=q.front();
                q.pop();
                for(int i=0;i<4;i++){
                    int x = dx[i]+top/n;
                    int y = dx[i+1]+top%n;
                    
                    if(x<0||x>=m||y<0||y>=n||grid[x][y]!=1){
                        continue;
                    }
                    
                    grid[x][y]=2;
                    q.push(x*n+y);
                }
            }
            time++;
        }
        
        return rotten==total?max(time-1,0):-1;
    }
};
